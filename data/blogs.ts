export interface Blog {
  id: string;
  title: string;
  date: string;
  tags: string[];
  summary: string;
  content: string;
  image?: string;
}

// Sample blog data
export const blogs: Blog[] = [
  {
    id: "ai-for-predictive-maintenance",
    title: "AI for the Predictive Maintenance of Wind Turbines",
    date: "2025-05-09",
    tags: [
      "AI",
      "Machine Learning",
      "Predictive Maintenance",
      "Wind Turbines",
      "SCADA Data",
    ],
    summary:
      "Exploring how AI and machine learning can optimize the predictive maintenance of wind turbines, making renewable energy more reliable and cost-effective.",
    content: `
# AI for the Predictive Maintenance of Wind Turbines

Predictive maintenance has become a critical area of research as the world shifts towards more sustainable energy sources like wind power. Wind turbines, operating in harsh environments, are prone to various failures that can be costly and challenging to address without effective maintenance strategies. This blog explores how artificial intelligence (AI) and machine learning can enhance the predictive maintenance of wind turbines, using real-world SCADA data from a wind farm in Portugal.

## Why Predictive Maintenance for Wind Turbines?

Wind turbines are complex machines, and their maintenance presents significant challenges due to their remote locations and varying operating conditions. Predictive maintenance aims to identify potential failures before they occur, reducing downtime, improving safety, and optimizing operational costs. Unlike reactive or scheduled maintenance, predictive maintenance leverages real-time data to make proactive decisions, reducing both the frequency and severity of unexpected failures.

## Using AI for Failure Prediction

AI models can analyze the vast amounts of SCADA data generated by wind turbines to identify patterns that indicate imminent failures. The project explored various machine learning algorithms, including:

- **Random Forest**: Performed best overall, balancing high precision and recall
- **XGBoost**: Known for fast computation and high accuracy
- **Multilayer Perceptron (MLP)**: Captured complex, non-linear relationships
- **Isolation Forest**: Detected anomalies effectively
- **Custom Class Confidence Proportion Decision Tree (CCPDT)**: Designed specifically for handling severe class imbalance

The project focused on optimizing these models using advanced techniques like hyperparameter tuning, class balancing (SMOTE-ENN), and feature engineering to improve prediction accuracy.

## Key Challenges and Solutions

One of the biggest challenges was dealing with the extreme class imbalance, as failures are rare but critical to detect. Techniques like SMOTE-ENN and threshold optimization were used to ensure models remained sensitive to failure events without overwhelming the majority class. Additionally, feature engineering based on domain knowledge significantly improved the models' ability to identify failure patterns.

## Results and Findings

The Random Forest model outperformed others in terms of overall composite score, demonstrating its robustness in high-dimensional data environments. It effectively balanced recall and precision, making it a reliable choice for real-time failure prediction.

## Future Directions

As AI technology continues to evolve, integrating real-time data streams and improving interpretability will be crucial for making predictive maintenance systems more practical and reliable. This project demonstrates the potential of AI to make wind energy more sustainable and cost-effective, contributing to the broader effort to combat climate change.
    `,
    image: "/images/blog/windturbine.jpeg",
  },
  {
    id: "starting-with-wordpress",
    title: "Starting My WordPress Journey",
    date: "2025-05-09",
    tags: ["WordPress", "Gutenberg", "Web Development", "CMS"],
    summary:
      "My first steps into the world of WordPress, exploring the basics of building and customizing websites with the Gutenberg editor.",
    content: `
# Starting My WordPress Journey

I've recently started learning WordPress, specifically focusing on the Gutenberg editor. After mostly building custom projects from scratch, I wanted to explore a more content-focused, user-friendly CMS that powers a huge portion of the web.

## Why WordPress?

WordPress is one of the most widely used content management systems in the world, known for its flexibility, community support, and powerful customization options. It's a great platform for building everything from personal blogs to full-scale business websites, making it a valuable tool for any web developer.

## Getting Started with Gutenberg

I followed [this YouTube tutorial](https://www.youtube.com/watch?v=ERIz3diT9Sk) to get up to speed. It covered the basics, including:

- Setting up a WordPress site
- Understanding the Gutenberg block editor
- Creating pages and posts
- Customizing layouts and content blocks

This was a great introduction, helping me understand the core concepts and features of WordPress without getting too overwhelmed.

## First Impressions

One thing that stood out to me was how quickly you can get a site up and running. Gutenberg's block-based approach makes it easy to design pages without touching a line of code, though I can see the appeal of adding custom HTML and CSS for more control.

## Next Steps

Next, I plan to dive deeper into custom themes, plugins, and more advanced WordPress features. I'm also interested in exploring the performance and SEO aspects of WordPress, as well as integrating it with other tools and platforms.

Iâ€™ll keep updating this blog as I learn more and take on bigger projects.
  `,
    image: "/images/blog/wordpress.png",
  },
];

// Helper function to search blogs
export function searchBlogs(
  query: string,
  selectedTags: string[] = []
): Blog[] {
  if (!query && selectedTags.length === 0) {
    return blogs;
  }

  const lowerCaseQuery = query.toLowerCase();

  return blogs.filter((blog) => {
    // Match by title or content
    const matchesQuery =
      !query ||
      blog.title.toLowerCase().includes(lowerCaseQuery) ||
      blog.content.toLowerCase().includes(lowerCaseQuery) ||
      blog.summary.toLowerCase().includes(lowerCaseQuery);

    // Match by tags
    const matchesTags =
      selectedTags.length === 0 ||
      selectedTags.every((tag) => blog.tags.includes(tag));

    return matchesQuery && matchesTags;
  });
}

// Get all unique tags from blogs
export function getAllTags(): string[] {
  const tagsSet = new Set<string>();

  blogs.forEach((blog) => {
    blog.tags.forEach((tag) => {
      tagsSet.add(tag);
    });
  });

  return Array.from(tagsSet).sort();
}

// Get a blog by ID
export function getBlogById(id: string): Blog | undefined {
  return blogs.find((blog) => blog.id === id);
}
